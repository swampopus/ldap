<?php

/**
 * @file
 * This module facilitates logging in using LDAP instead of FlightPath's regular login method.
 */



function ldap_menu() {
  $items = array();
  
  $items["admin/config/ldap"] = array(
    "title" => "LDAP settings",
    "page_callback" => "fp_render_form",
    "page_arguments" => array("ldap_settings_form", "system_settings"),
    "access_arguments" => array("administer_ldap"),
    "page_settings" => array(
      "page_has_search" => FALSE,
      "menu_icon" => fp_get_module_path('system') . "/icons/cog.png",
      "page_banner_is_link" => TRUE,
      "page_hide_report_error" => TRUE,
      "menu_links" => array(         
        0 => array(
          "text" => "Back to main menu",
          "path" => "admin-tools/admin",
        ),
      ),
    ),    
    "weight" => 0,
    "type" => MENU_TYPE_SUB_TAB,
    "tab_family" => "ldap_tab_family",
    "tab_parent" => "admin-tools/admin",    
  );     


  $items["admin/config/ldap/debug"] = array(
    "title" => "LDAP debug",
    "page_callback" => "fp_render_form",
    "page_arguments" => array("ldap_debug_form"),
    "access_arguments" => array("administer_ldap"),
    "page_settings" => array(
      "page_has_search" => FALSE,
      "page_banner_is_link" => TRUE,
      "page_hide_report_error" => TRUE,
      "menu_links" => array(         
        0 => array(
          "text" => "Back to main menu",
          "path" => "admin-tools/admin",
        ),
      ),
    ),    
    "weight" => 10,
    "type" => MENU_TYPE_SUB_TAB,
    "tab_family" => "ldap_tab_family",
    "tab_parent" => "admin-tools/admin",    
  );     




  
  return $items;
  
}


function ldap_perm() {
  return array(
    "administer_ldap" => array(
      "title" => t("Administer LDAP"),
      "description" => t("Configure LDAP settings."),
    ),
  );
}
 



function ldap_debug_form() {
  $form = array();
  
  $form['mark_top'] = array(
    'value' => "<p>" . t("Use this form to debug the LDAP module settings.  Enter a username below to perform
                    a search for the user using current settings.  The results will be displayed when you submit the form.") . "</p>",
  );
  

  $form['test_username'] = array(
    'type' => 'textfield',
    'label' => t('Test Username'),    
  );
  
    
  $form['submit_btn'] = array(
    'type' => 'submit',
    'value' => 'Submit',
  );
  
  
  return $form;
} // ..debug_form


function ldap_debug_form_submit($form, $form_state) {
  
  $test_username = trim($form_state['values']['test_username']);
  
  // Okay, we want to perform a connection, then search for this user's attributes.
  $results = ldap_auth_connect($test_username, NULL, TRUE);
  
  $html = fp_html_print_r($results);
  fp_add_message("Results below: (click to open)");
  fp_add_message($html);
  
  
} // ... submit






/**
 * Authenticate the user with the ldap server.
 * 
 * Checks the username and password in the ldap server, and returns
 * back the result.
 * 
 * Note, if bool_ldap_result_only == TRUE, then we will not attempt to bind to user,
 * and instead will simply return back a result.  In this case, set the password to NULL or ""
 * 
 */
function ldap_auth_connect($username, $password, $bool_ldap_result_only = FALSE) {
  $rtn = FALSE;
      
  // First, connect to the LDAP server and see that this is
  // a valid login.
  $server = variable_get("ldap_server_ip", "");
  $server2 = variable_get("ldap_server_ip2", "");
  
  // If we have a second server specified, then try to randomly select between the two, for
  // load balancing purposes.
  if (trim($server2) != "") {
    $r = rand(1, 2);
    if ($r == 2) {
      $server = $server2;
    }
  }
  
    
  $port = variable_get("ldap_server_port", "389");
  if (in_array("yes", variable_get("ldap_connect_secure", array()))) {
    // This should be a secure connection.
    $server = "ldaps://" . $server;
  }
  else {
    $server = "ldap://" . $server;
  }
  
  //ldap_set_option(NULL, LDAP_OPT_DEBUG_LEVEL, 7);
  $ldapconn = ldap_connect($server, $port);
  //ldap_set_option($ldapconn, LDAP_OPT_PROTOCOL_VERSION, 2);
  //ldap_set_option($ldapconn, LDAP_OPT_REFERRALS, 0);
  
    
  if (!$ldapconn) {
    fp_add_message(t("Could not connect to ldap server at %server.  Please
                      consult with your system administrator.", array("%server" => "$server:$port")));
    return FALSE;
  }


  $uid_attr = variable_get("ldap_uid_attr", "uid");

  // First, let's try to connect using the search dn, to try and find the user and get our results. 
  $search_dn = variable_get("ldap_search_dn", "");
  $search_password = variable_get("ldap_search_password", "");

  // Attempt the non-anonymous search bind first.
  $x = ldap_bind($ldapconn, $search_dn, $search_password);
  if (!$x) {
    watchdog("ldap", "Could not bind to search DN, using the server, port, search DN and password.");
    fp_add_message(t("Could not authenticate to LDAP server for a non-anonymous search.  Please inform your
                       technical support, as this may indicate a configuration error."), "error");
    return FALSE;
  } 

  $bind_successful = FALSE;

  $base_dns = variable_get("ldap_base_dns", "");
  $lines = explode("\n", $base_dns);  
  foreach($lines as $base_dn) {
    // Try out all of our base_dns
    $base_dn = trim($base_dn);
    $r = ldap_search($ldapconn, $base_dn, "$uid_attr=$username");
    if ($r) { 
    
      $result = ldap_get_entries($ldapconn, $r);
      if (is_array($result) && intval($result["count"]) > 0) {
        $result = $result[0];
        
        // Okay, it was successful!  Let's store the results about this user.
        $rtn = $result;

        // If the result is all we were after, we can end here.
        if ($bool_ldap_result_only) return $rtn;
        

        // Okay, now we need this individual user's DN, so we can authenticate.
        $user_dn_field = variable_get("ldap_user_dn_field_name", "dn");
        
        $user_base_dn = ldap_get_field_value_from_result($user_dn_field, $result);
              
        // Continuing, let's now bind for the individual user, using their full DN and supplied password.
        // Attempt to authenticate...
        $bind_successful = FALSE;
        if (!$bool_ldap_result_only && strlen($password) > 0) {
          
          // Convert user_base_dn field to lowercase
          // only do this according to a setting
          if (variable_get("ldap_user_dn_force_lowercase", "no") == "yes") {                    
            $user_base_dn = strtolower($user_base_dn);
          }
          
          $user_bind_string = $user_base_dn;
          
                    
          $bind_successful = @ldap_bind($ldapconn, $user_bind_string, $password);  
          if (!$bind_successful) {
            if (ldap_get_option($ldapconn, LDAP_OPT_DIAGNOSTIC_MESSAGE, $extended_error)) {
                
              // Display a message if we get back certain data values in the extended error message.
              // See: https://knowledge.broadcom.com/external/article?articleId=51487
              $bool_special = FALSE;  
              if (stristr($extended_error, 'data 701')) {
                fp_add_message(t("Note: Your LDAP account is expired.  Please contact your network administrator or IT department."), 'error');
                $bool_special = TRUE;
              }                
              if (stristr($extended_error, 'data 533')) {
                fp_add_message(t("Note: Your LDAP account is disabled.  Please contact your network administrator or IT department."), 'error');
                $bool_special = TRUE;
              }                
              if (stristr($extended_error, 'data 532') || stristr($extended_error, 'data 773')) {
                fp_add_message(t("Note: Your LDAP password is expired and must be changed before continuing.  If you do not know how to change your password, please contact your network administrator or IT department."), 'error');
                $bool_special = TRUE;
              }
              if (stristr($extended_error, 'data 775')) {
                fp_add_message(t("Note: Your LDAP account is locked.  Please contact your network administrator or IT department."), 'error');
                $bool_special = TRUE;
              }

              if ($bool_special) {
                watchdog('ldap', "Login attempt failed for $username. Base dn: $user_base_dn.  Bind string: $user_bind_string.  Extended error: $extended_error", array(), WATCHDOG_ALERT);
              }
              
            } // if ldap_get_option
              
          } // if !bind_successful

          if ($bind_successful) break;
          
        }   
                
        
        
      } // if is_array($result)   
    } // if ($r)    
    
  } //foreach 
  

  
  
  // Tidy up...
  ldap_close($ldapconn);  
  
  
  if ($bind_successful) { 
   return $rtn; 
  }
  else {
    return FALSE;
  }
  
  
}







function z__old__ldap_auth_connect($username, $password) {
  $rtn = FALSE;
  
  // First, connect to the LDAP server and see that this is
  // a valid login.
  $server = variable_get("ldap_server_ip", "");
  $server2 = variable_get("ldap_server_ip2", "");
  
  // If we have a second server specified, then try to randomly select between the two, for
  // load balancing purposes.
  if (trim($server2) != "") {
    $r = rand(1, 2);
    if ($r == 2) {
      $server = $server2;
    }
  }
  
    
  $port = variable_get("ldap_server_port", "389");
  if (in_array("yes", variable_get("ldap_connect_secure", array()))) {
    // This should be a secure connection.
    $server = "ldaps://" . $server;
  }
  
  
  $ldapconn = ldap_connect($server, $port);
  if (!$ldapconn) {
    fp_add_message(t("Could not connect to ldap server at %server.  Please
                      consult with your system administrator.", array("%server" => "$server:$port")));
    return;
  }

  // Attempt to authenticate...
  $uid_attr = variable_get("ldap_uid_attr", "uid");
  $base_dns = variable_get("ldap_base_dns", "");
  $lines = explode("\n", $base_dns);
  $bind_successful = FALSE;
  foreach($lines as $base_dn) {
    // Try out all of our base_dns
    $base_dn = trim($base_dn);    
    $bind_successful = @ldap_bind($ldapconn, "$uid_attr=$username,$base_dn", $password);
    if ($bind_successful) break;
  }

  // If the bind was successful, it means we got a valid username and password
  // from the user.  Now, let's bind with our search DN and search password
  // to get more information about the user.
  if ($bind_successful)
  {
    
    $search_dn = variable_get("ldap_search_dn", "");
    $search_password = variable_get("ldap_search_password", "");
    
    $x = ldap_bind($ldapconn, $search_dn, $search_password);
    $r = ldap_search($ldapconn, $base_dn, "$uid_attr=$username");
    if ($r)
    {
      $result = ldap_get_entries($ldapconn, $r);
      if (is_array($result)) {
        $result = $result[0];
        
        // Okay, it was successful!  We can now return a success
        // message with our result.
        $rtn = $result;
                
      }
      
    }
  }

  
  ldap_close($ldapconn);  
  
  return $rtn;  
  
}







/**
 * This is the config form for the ldap module.
 *
 */
function ldap_settings_form() {
  $form = array();
  
  fp_add_css(fp_get_module_path("ldap") . "/css/ldap.css");
  
  $form["ldap_server_ip"] = array(
    "label" => t("Primary LDAP server name or IP address:"),
    "type" => "text",
    "value" => variable_get("ldap_server_ip", ""),
    "description" => t("Ex: 192.168.5.73 or ldap.example.com"),
  );
  
  $form["ldap_server_ip2"] = array(
    "label" => t("(Optional) Secondary LDAP server name or IP address:"),
    "type" => "text",
    "value" => variable_get("ldap_server_ip2", ""),
    "description" => t("This is for the purposes of load balancing ONLY!  If you have enter a second
                        LDAP server address, this module will randomly select between your two
                        addresses when a user logs on.  If you do not have a second LDAP
                        server, or are unsure what to do, then LEAVE THIS FIELD BLANK."),
  );
  
  
  $form["ldap_server_port"] = array(
    "label" => t("LDAP server port:"),
    "type" => "text",
    "size" => 10,
    "value" => variable_get("ldap_server_port", "389"),
    "description" => t("Ex: 389"),
  );
  
  $form["ldap_connect_secure"] = array(
    "label" => t("Security:"),
    "type" => "checkboxes",
    "options" => array("yes" => t("Connect to LDAP server securely")),
    "value" => variable_get("ldap_connect_secure", array()),
    "description" => t("If checked, the LDAP connection will
                        be conducted securely, using the ldaps:// protocol.
                        If your LDAP server does not use a security certificate,
                        or if you have problems, leave this unchecked."),
  );
  

  $form["ldap_search_dn"] = array(
    "label" => t("DN for non-anonymous search:"),
    "type" => "text",
    "value" => variable_get("ldap_search_dn", ""),
    "description" => t("Ex: cn=ldapFPuser,ou=profile,dc=example,dc=edu <br>or just the username. Ex: myusernamexyz"),
  );
  

  $form["ldap_search_password"] = array(
    "label" => t("Password for non-anonymous search:"),
    "type" => "password",
    "value" => variable_get("ldap_search_password", ""),    
  );
  
  $form["ldap_base_dns"] = array(
    "label" => t("Base DNs for LDAP user entries:"),
    "type" => "textarea",
    "value" => variable_get("ldap_base_dns", ""),
    "description" => t("Enter one DN per line.<br>Ex: ou=Students,ou=People,dc=example,dc=edu<br>&nbsp; ou=Employees,ou=People,dc=example,dc=edu"),
  );


  $form["ldap_uid_attr"] = array(
    "label" => t("Username attribute:"),
    "type" => "text",
    "size" => 20,
    "value" => variable_get("ldap_uid_attr", "uid"),
    "description" => t("Ex: uid or cn, etc.") . "<br><b>
                      " . t("Note that your field names may need to be all-lowercase, regardless
                        of how it is represented in LDAP.") . "</b>",
  );

  
  
  $form["ldap_user_dn_field"] = array(
    "label" => t("User base DN field name in LDAP entry:"),
    "type" => "text",
    "size" => 20,
    "value" => variable_get("ldap_user_dn_field_name", "dn"),
    "description" => t("Ex: dn.  This is the field name, returned by LDAP, which contains the user's full DN.  In most cases,
                        it is simply <em>dn</em>, though it might be <em>name</em> or something similar, depending on your set up.  If you
                        are not sure what to do, leave this as <em>dn</em>.") . "<br><b>
                      " . t("Note that your field names may need to be all-lowercase, regardless
                        of how it is represented in LDAP.") . "</b>",
  );
  



  $form['ldap_user_dn_force_lowercase'] = array(
    'label' => t("Convert the user's DN field string to be all lowercase?"),
    'type' => 'select',
    'hide_please_select' => TRUE,
    'options' => array('no' => 'No (default)', 'yes' => 'Yes - convert to lowercase'),
    'value' => variable_get("ldap_user_dn_force_lowercase", "no"),
    'description' => t("If you are having trouble with authentications, try setting this to 'Yes'.  If you are unsure
                        what to do, leave this set to 'No'."),
  );


  $form["ldap_no_cwid_msg"] = array(
    "label" => t("Message to display if the CWID cannot be found:"),
    "type" => "textarea",
    "rows" => 2,
    "value" => variable_get("ldap_no_cwid_msg", t("The user's CWID cannot be found in the LDAP result.  Please consult the system administrator.")),
    "description" => t("Ex: This user's CWID cannot be found in the LDAP result.  Please consult the system administrator."),
  );

  
  
  ///////////////////
  
  
  $form["ldap_cwid_field"] = array(
    "label" => t("User CWID field:"),
    "type" => "text",
    "size" => 30,
    "prefix" => "<hr>",
    "value" => variable_get("ldap_cwid_field", "employeenumber"),
    "description" => t("In the result set of a user's lookup in LDAP, what field 
                        contains the user's CWID?  Ex: employeenumber, userid, etc.") . "
                        <br><b>" . t("Note that your field names may need to be all-lowercase, regardless
                        of how it is represented in LDAP.") . "</b>",
  );  
  
  
  $form["ldap_f_name_field"] = array(
    "label" => t("User first name field:"),
    "type" => "text",
    "size" => 30,    
    "value" => variable_get("ldap_f_name_field", ""),
    "description" => t("In the result set of a user's lookup in LDAP, what field 
                        contains the user's first name? Leave blank if not set.") . "
                        <br><b>" . t("Note that your field names may need to be all-lowercase, regardless
                        of how it is represented in LDAP.") . "</b>",
  );  
  
  $form["ldap_l_name_field"] = array(
    "label" => t("User last name field:"),
    "type" => "text",
    "size" => 30,    
    "value" => variable_get("ldap_l_name_field", ""),
    "description" => t("In the result set of a user's lookup in LDAP, what field 
                        contains the user's last name? Leave blank if not set.") . "
                        <br><b>" . t("Note that your field names may need to be all-lowercase, regardless
                        of how it is represented in LDAP.") . "</b>",
  );  
  
  
  
  $op_options = array(
    "contains" => t("contains"),
    "does not contain" => t("does not contain"),
    "is numeric" => t("is numeric (value field ignored)"),
    "is not numeric" => t("is not numeric (value field ignored)"),
    "is blank" => t("is blank (value field ignored)"),
    "is not blank" => t("is not blank (value field ignored)"),
    "invoke hook" => t("invoke hook (for developers, see README.txt)"),
  );
    
  
  $form["ldap_is_student_field"] = array(
    "type" => "text",
    "size" => 10,
    "value" => variable_get("ldap_is_student_field", "usertype"),
    "prefix" => "<p><b>" . t("How to determine if the user is a student:") . "</b></p>" . t("If field name:") . " ",
  );
  
  $form["ldap_is_student_op"] = array(
    "type" => "select",
    "options" => $op_options,
    "no_please_select" => TRUE,
    "value" => variable_get("ldap_is_student_op", array()),
  );

  $form["ldap_is_student_op_value"] = array(
    "type" => "text",
    "size" => 15,
    "value" => variable_get("ldap_is_student_op_value", "student"),
    "prefix" => " " . t("value:"),
    "description" => t("This will determine if the user logging in should have their is_student
                        flag set in the database.<br>Ex: if <em>usertype</em> contains <em>student</em>. Case insensitive.
                        You may also use the user's <em>dn</em> as a field name.") . "
                        <br><b>" . t("Note that your field names may need to be all-lowercase, regardless
                        of how it is represented in LDAP.") . "</b>",
  );
  

  
  $form["ldap_is_faculty_field"] = array(
    "type" => "text",
    "size" => 10,
    "value" => variable_get("ldap_is_faculty_field", "usertype"),
    "prefix" => "<p><b>" . t("How to determine if the user is a faculty:") . "</b></p>" . t("If field name:") . " ",
  );
  
  $form["ldap_is_faculty_op"] = array(
    "type" => "select",
    "options" => $op_options,
    "no_please_select" => TRUE,
    "value" => variable_get("ldap_is_faculty_op", array()),
  );

  $form["ldap_is_faculty_op_value"] = array(
    "type" => "text",
    "size" => 15,
    "value" => variable_get("ldap_is_faculty_op_value", "faculty"),
    "prefix" => " " . t("value:"),
    "description" => t("This will determine if the user logging in should have their is_faculty
                        flag set in the database.<br>Ex: if <em>usertype</em> contains <em>faculty</em>. Case insensitive.
                        You may also use the user's <em>dn</em> as a field name.") . "
                        <br><b>" . t("Note that your field names may need to be all-lowercase, regardless
                        of how it is represented in LDAP.") . "</b><br><br>",
  );
  
  
  $form["ldap_user_type_binary"] = array(
    "label" => t("Limit user type options?"),
    "type" => "radios",
    "options" => array("only_one" => t("User may be either student or faculty, not both. (Select for best compatibility)"), 
                       "both" => t("User may be both student and faculty. (Experimental support)")),
    "value" => variable_get("ldap_user_type_binary", "only_one"),
  );
  
  

  $form["ldap_restrict_to_users"] = array(
    "label" => t("Restrict to only the following users:"),
    "type" => "textarea",    
    "prefix" => "<hr>",
    "value" => variable_get("ldap_restrict_to_users", ""),
    "description" => t("Enter usernames (or email addresses-- only usernames will be used) one per line.  These will be the only users who will be allowed to log in.  <u>admin</u> will always be allowed.
                        To disable, simply erase this list.  If *anything* is in this box, then this restriction will be enabled.
                        <br><b>If you wish to use the restriction setting below, this box must be EMPTY.</b>"),
    
  );

    
  $form["ldap_restrict_to_students_table"] = array(
    "label" => t("Restrict to students in the <i>students</i> table:"),
    "type" => "checkboxes",
    "options" => array("yes" => t("Yes, restrict based on the <i>students</i> table")),
    "value" => variable_get("ldap_restrict_to_students_table", array()),
    "description" => t("If checked, only students who <b>already exist</b> in the <i>students</i> database table (based on cwid field)
                        will be permitted to log in.  This will have no effect on non-student users.
                        <br><b>This will only work if the above Restrict to Users box is empty.</b>
                        <br>If you are unsure what to check, or if you want all LDAP users to be able to log in, whether or not they have logged in before,
                        then leave this box UNCHECKED."),
  );
      
  
  
  
  
  $form["mark" . $m++] = array(
    "value" => "<hr>",
  );
  
  return $form;
}


/**
 * Implementation of hook_form_alter
 *
 * @param unknown_type $form
 * @param unknown_type $form_id
 */
function ldap_form_alter(&$form, $form_id) {
  
  // The primary thing we want to do here is add OUR validate handler
  // to the login form.  We want to overwrite the default one that's there.
  if ($form_id == "system_login_form") {    
    $form["#validate_handlers"] = array("ldap_login_form_validate");
  }
  
  
}


/**
 * Custom validate handler for the login form.
 * 
 * We will check in both FlightPath's regular user table, as well as establish
 * our LDAP connection and try to authenticate there.
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function ldap_login_form_validate(&$form, &$form_state) {

  $username = trim($form_state["values"]["user"]);
  $password = $form_state["values"]["password"];  // plain text password
  
  // If the GRANT_FULL_ACCESS is turned on, skip trying to validate
  if ($GLOBALS["fp_system_settings"]["GRANT_FULL_ACCESS"] == TRUE) {
    $username = "admin";
    $form_state["passed_authentication"] = TRUE;
    $form_state["db_row"]["user_id"] = 1;
    $form_state["db_row"]["user_name"] = "FULL ACCESS USER";
    return;
  }    
  
  // Are we restricting users?  If so, make sure the username is one that we are allowing in.
  $restrict = trim(variable_get("ldap_restrict_to_users", ""));
  if ($restrict != "") {
    $bool_in_list = FALSE;
    $lines = explode("\n", $restrict);
    foreach ($lines as $line) {
      $temp = explode("@", $line);
      $temp = trim($temp[0]);
      if ($temp == trim($username) || $username == "admin") {
        $bool_in_list = TRUE;
        break;
      }
    }
    
    if ($bool_in_list == FALSE) {
      // We were not in the list, so do not allow.
      // If we are here, then we couldn't log in.  Let's display a form_error.
      form_error("password", t("Sorry, but not all users are allowed to use this system at this time.  If you
                                need access, please contact your supervisor or advisor."));
      return;
    }
    
  }
  
  
  $temp = variable_get("ldap_restrict_to_students_table", array());
  $bool_resrict_to_students_table = FALSE;
  if (@$temp['yes'] === 'yes') {
    $bool_resrict_to_students_table = TRUE;
  }  
     

  $allowed_ranks_str = variable_get("allowed_student_ranks", "FR, SO, JR, SR");
  $allowed_ranks = csv_to_array($allowed_ranks_str);

  
  
  // Let's check in the usual way first:
  $res = db_query("SELECT * FROM users WHERE user_name = ? AND is_disabled = '0' ", $username);  
  $cur = db_fetch_array($res);
  // Check the user's password is valid.
  $stored_hash = @$cur["password"];
  if (user_check_password($password, $stored_hash)) {
    // Yes, we found a match, so we will just use this.
    
    // Check to make sure this student's rank_code is allowed.
    if (intval($cur['is_student']) === 1) {
      $rank_code = db_result(db_query("SELECT rank_code FROM students WHERE cwid = ?", array($cur['cwid'])));
      if (!in_array($rank_code, $allowed_ranks)) {
        
        form_error("password", t("Sorry, your rank/classification is %rc.  At this time FlightPath is only available to students
                                  in the following ranks/classifications: @ranks_str", array("%rc" => $rank_code, "@ranks_str" => $allowed_ranks_str)));
        return;    
        
      }
    }        
    
    
    $form_state["db_row"] = $cur;
    $form_state["passed_authentication"] = TRUE;
    return;

  }  
    

  // Okay, we made it here.  Let's connect to LDAP and check there.
  $result = ldap_auth_connect($username, $password);
  
  if ($result) {
    
    // Save in the form_state for other users.
    $form_state["ldap_result"] = $result;
    $cwid_field = trim(variable_get("ldap_cwid_field", "employeenumber"));
    $cwid = $result[$cwid_field][0];    
    
    if (!$cwid || $cwid == "") {
      fp_add_message(variable_get("ldap_no_cwid_msg", ""));
      return;
    }

    
    $f_name_field = trim(variable_get("ldap_f_name_field", ""));
    $l_name_field = trim(variable_get("ldap_l_name_field", ""));
    $f_name = ucwords(strtolower($result[$f_name_field][0]));
    $l_name = ucwords(strtolower($result[$l_name_field][0]));
        
    $is_student = ldap_get_user_is_type_from_result("student", $result);
    $is_faculty = ldap_get_user_is_type_from_result("faculty", $result);

    // Can the user be only one type?  Either student or faculty?
    if (variable_get("ldap_user_type_binary", "only_one") == "only_one") {
      // If this is the case, we want to give precidence to faculty
      if ($if_faculty) $is_student = FALSE;
    }


    if ($is_student && $bool_resrict_to_students_table) {
      // We need to make sure that this CWID is already in the students table. If not, we kick them out.
      $cwid_check = db_result(db_query("SELECT cwid FROM students WHERE cwid = ?", array($cwid)));
      if ($cwid_check != $cwid) {
        // Meaning, it was not found.
        form_error("password", t("Sorry, but not all users are allowed to use this system at this time.  If you
                                  need access, please contact your supervisor or advisor."));
        return;                
      }
    }


    // If this is a student, does this student have an accepted "allowed rank" (ie, FR, SO, JR, etc)?
    if ($is_student) {
      $rank_code = db_result(db_query("SELECT rank_code FROM students WHERE cwid = ?", array($cwid)));
      if (!in_array($rank_code, $allowed_ranks)) {
        
        form_error("password", t("Sorry, your rank/classification is %rc.  At this time FlightPath is only available to students
                                  in the following ranks/classifications: @ranks_str", array("%rc" => $rank_code, "@ranks_str" => $allowed_ranks_str)));
        return;    
        
      }
    }


    
    // Let's update the users table with this new information for this user.
    
    //$user_id = db_get_user_id($username);
    if ($is_student) $test_type = "student";
    if ($is_faculty) $test_type = "faculty";
    $user_id = db_get_user_id_from_cwid($cwid, $test_type);
    
    if ($user_id) {    
      $res = db_query("UPDATE users 
              SET password = 'LDAP user',
                  is_student = '?',
                  is_faculty = '?',
                  f_name = '?',
                  l_name = '?',
                  cwid = '?',
                  user_name = '?'                
              WHERE user_id = '?'
              ", intval($is_student), intval($is_faculty), $f_name, $l_name, $cwid, $username, $user_id);
    }
    else {
      // Add this as a new user to the table.
      
      db_query("INSERT INTO users (cwid, user_name, password, is_student, is_faculty, f_name, l_name)
                VALUES ('?', '?', 'LDAP user', '?', '?', '?', '?')
                ", $cwid, $username, intval($is_student), intval($is_faculty), $f_name, $l_name);
      $user_id = db_get_user_id($username);
      
      // Also, add this user to either the students and/or faculty table.
      if ($is_student) {
        db_query("INSERT INTO students (cwid, is_active) VALUES ('?', '1') ", $cwid);
      }
      if ($is_faculty) {
        db_query("INSERT INTO faculty (cwid) VALUES ('?') ", $cwid);
      }
      
    }
                  
    // Okay, so that this user may be logged in correctly,
    // we need to add values to $form_state["db_row"]
    $res = db_query("SELECT * FROM users WHERE user_id = '?' ", $user_id);
    $cur = db_fetch_array($res);
    $form_state["db_row"] = $cur;
    $form_state["passed_authentication"] = TRUE;
    return;
       
  }

  
   
  // If we are here, then we couldn't log in.  Let's display a form_error.
  form_error("password", t("Sorry, but that username and password combination could not
                            be found.  Please check your spelling and try again."));
  
}



/**
 * This will find the field value in the ldap result set, whether it is at $result["field_name"]
 * or $result["field_name"][0].
 *
 * @param unknown_type $field
 * @param unknown_type $result
 */
function ldap_get_field_value_from_result($field, $result) {
  
  $res = FALSE;
  if (isset($result[$field]) && !is_array($result[$field])) {
    $res = $result[$field];
  }
  else if (isset($result[$field][0])) {
    $res = $result[$field][0];
  }
    
  return $res;
  
}






/**
 * Looks at the ldap result to determine if this person's is_{type} flag should be set in the db.
 *
 * @param unknown_type $type
 * @param unknown_type $result
 */
function ldap_get_user_is_type_from_result($type, $result) {

  $field = variable_get("ldap_is_{$type}_field", "");
  $op = variable_get("ldap_is_{$type}_op", "");
  $op_value = variable_get("ldap_is_{$type}_op_value", "");
  
  
  // Get the field's value, if it is set, at either the field, or field[0], as is more often the case.
  $res = ldap_get_field_value_from_result($field, $result);
    
    
  if ($op == "contains") {
    if (stristr($res, $op_value)) {
      return TRUE;
    }
  }  
  
  if ($op == "does not contain") {
    if (!stristr($res, $op_value)) {
      return TRUE;
    }
  }  
  
  if ($op == "is numeric") {
    if (is_numeric($res)) {
      return TRUE;
    }
  }
  
  if ($op == "is not numeric") {
    if (!is_numeric($res)) {
      return TRUE;
    }
  }

  if ($op == "is blank") {
    if ($res == "") {
      return TRUE;
    }
  }
  
  if ($op == "is not blank") {
    if ($res != "") {
      return TRUE;
    }
  }

  
  if ($op == "invoke hook") {    
    // We should check to see if any other modules use the hook_ldap_determine_user_type, 
    // and if so, invoke them.
    $arr = invoke_hook("ldap_determine_user_type", array($type, $result));
    if (count($arr) > 0) {      
      // use the last result.
      $r = FALSE;
      foreach ($arr as $k => $v) {
        $r = $v;
      }
      return $r;
    }    
  }
    
  return FALSE;  
  
}


